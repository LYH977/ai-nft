/* eslint-disable @typescript-eslint/ban-ts-comment */
import Head from 'next/head'
import axios from 'axios'
import { useEffect, useRef, useState } from 'react'
import { ethers } from 'ethers'
import { Web3Provider } from '@ethersproject/providers'
import React from 'react'

//smart contract abi
import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import { base64 } from '@/public/mock/base64'

// const inter = Inter({ subsets: ['latin'] })
const JWT = `Bearer ${process.env.NEXT_PUBLIC_PINATA_JWT}`

export default function Home() {
  const [image, setImage] = useState('')
  const [file, setfile] = useState<any>()

  const [name, setName] = useState('')
  const [desc, setDesc] = useState('')

  const provider = useRef<any>()
  const smartContract = useRef<any>()


  useEffect(() => {
    try {
      loadBlockchainData()
    } catch (e) {
      console.log(e)
    }
  }, [])

  const loadBlockchainData = async () => {
    if ((window as any).ethereum) {

      provider.current = new ethers.providers.Web3Provider((window as any).ethereum)
      const network = await provider.current.getNetwork()
      smartContract.current = new ethers.Contract(
        '0x5fbdb2315678afecb367f032d93f642f64180aa3',//contract address
        NFT.abi,
        provider.current
      )
      console.log(smartContract.current)
    }
  }

  const generateImage = async (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault()
    try {
      const response = await axios.post(
        `https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5`,
        {
          headers: {
            Authorization: `Bearer ${process.env.NEXT_PUBLIC_HUGGING_FACE_API_KEY}}`,
          },
          method: 'POST',
          inputs: desc,
        },
        { responseType: 'blob' }
      )
      const file = new File([response.data], "image.png", {
        type: "image/png",
      });
      // saving the file in a state
      setfile(response.data);
      const url = URL.createObjectURL(response.data);
      // console.log(url)
      console.log(url);
      setImage(url);

    } catch (err) {
      console.log(err)
    }

  }

  const mintNFT = async (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault()
    const file2 = new File([base64], "image.png", {
      type: "image/png",
    });

    const formData = new FormData();
    // formData.append('file', file)
    formData.append('file', file2)
    const metadata = JSON.stringify({
      name,
      author: 'LYH'
    });
    formData.append('pinataMetadata', metadata);
    const options = JSON.stringify({
      cidVersion: 0,
    })
    formData.append('pinataOptions', options);
    try {
      const res = await axios.post("https://api.pinata.cloud/pinning/pinFileToIPFS", formData, {
        //@ts-ignore
        maxBodyLength: "Infinity",
        headers: {
          //@ts-ignore
          'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,
          Authorization: JWT
        }
      });
      //@ts-ignore
      console.log(`multipart/form-data; boundary=${formData._boundary}`)
      console.log({ formData })
      console.log(res.data);
      // const IpfsHash = res.data.IpfsHash
      // const signer = await provider.current.getSigner()
      // const transaction = await smartContract.current
      //   .connect(signer)
      //   .mint(`https://gateway.pinata.cloud/ipfs/${IpfsHash}`, { value: ethers.utils.parseUnits('1', 'ether') })
      // await transaction.wait()
      // console.log('done')

    } catch (error) {
      console.log(error);
    }
  }
  return (
    <>
      <Head>
        <title>Ai NFT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1
        // onClick={ async () => {
        //   // const gg = await smartContract.current.totalSupply()
        //   // console.log(gg.toString())

        //   // const ownerAddress = await smartContract.current.ownerOf(1)
        //   // console.log(ownerAddress)

        //   // const cost = await smartContract.current.cost()

        //   // const tokenURI = await smartContract.current.tokenURI(1)
        //   // console.log(tokenURI)

        //   const response = await axios.post('/api/mint', { image: base64 });
        //   console.log(response)
        //   // setImage(response.data)

        // }}
        >Ai NFT</h1>
        <div>
          <form className='flex flex-col gap-8'>
            <label className='flex items-center'>
              Name
              <input className='bg-gray-100' name='name' onChange={ (e) => setName(e.target.value) } value={ name } />
            </label>
            <label className='flex items-center'>
              Description
              <textarea className='bg-gray-100' name='description' onChange={ (e) => setDesc(e.target.value) } value={ desc } />
            </label>
            <button onClick={ generateImage }>Generate Image</button>


            <button className='bg-gray-100' onClick={ mintNFT }>Mint NFT</button>

          </form>
          { image ? <img src={ image } alt='fdfd' height={ 200 } width={ 200 } /> : <img src="./test.jpg" alt='fdfd' height={ 200 } width={ 200 } /> }
        </div>

      </main>
    </>
  )
}
