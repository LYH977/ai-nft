/* eslint-disable @typescript-eslint/ban-ts-comment */
import Head from 'next/head'
import axios from 'axios'
import { useEffect, useRef, useState } from 'react'
import { ethers } from 'ethers'

//smart contract abi
import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import { base64 } from '@/public/mock/base64'

import { ToastContainer, toast, ToastOptions } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';


const toastProps: ToastOptions = { theme: "colored" }

export default function Home() {
  const [image, setImage] = useState('')
  const [file, setfile] = useState<any>()

  const [imgName, setImgName] = useState('')
  const [desc, setDesc] = useState('')


  const provider = useRef<any>()
  const smartContract = useRef<any>()


  const isGenerateBtnDisabled = !(imgName && desc)
  const isMintBtnDisabled = !(image)


  useEffect(() => {
    loadBlockchainData()
  }, [])

  const loadBlockchainData = async () => {
    if ((window as any).ethereum) {
      provider.current = new ethers.providers.Web3Provider((window as any).ethereum)
      // const network = await provider.current.getNetwork()
      smartContract.current = new ethers.Contract(
        '0x5fbdb2315678afecb367f032d93f642f64180aa3',//contract address
        NFT.abi,
        provider.current
      )
    }
  }

  const generateImage = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    try {
      const response = await axios.post(
        `./api/generateImage`, { description: desc }
      )
      if (response.status === 200) {
        setImage(response.data.base64);
        toast.success(`Generated image "${imgName}"`, toastProps)
      }
      else {
        toast.error('Image generation service is currently unavailable. Please come back later.', toastProps)
      }
    } catch (err) {
      console.error(err)
      toast.error('Oops. something is wrong now. Please come back later.', toastProps)
    }
  }


  const mintNFT = async (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault()
    try {
      const response = await axios.post(
        `./api/uploadToIPFS`, { name: imgName, image }
      )
      if (response.status === 200) {
        const IpfsHash = response.data.IpfsHash
        const signer = await provider.current.getSigner()
        const transaction = await smartContract.current
          .connect(signer)
          .mint(`https://gateway.pinata.cloud/ipfs/${IpfsHash}`, { value: ethers.utils.parseUnits('1', 'ether') })
        await transaction.wait()
        toast.success('Minted NFT!', toastProps)
      } else {
        toast.error('Ipfs upload service is currently unavailable. Please come back later.', toastProps)
      }

    } catch (e) {
      console.error(e)
      toast.error('Oops. something is wrong now. Please come back later.', toastProps)
    }

  }



  return (
    <>
      <Head>
        <title>Ai NFT</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1
        // onClick={ async () => {
        //   // const gg = await smartContract.current.totalSupply()
        //   // console.log(gg.toString())

        //   // const ownerAddress = await smartContract.current.ownerOf(1)
        //   // console.log(ownerAddress)

        //   // const cost = await smartContract.current.cost()

        //   // const tokenURI = await smartContract.current.tokenURI(1)
        //   // console.log(tokenURI)

        //   const response = await axios.post('/api/mint', { image: base64 });
        //   console.log(response)
        //   // setImage(response.data)

        // }}
        >Ai NFT</h1>
        <div>
          <form className='flex flex-col gap-8' onSubmit={ generateImage }>
            <label className='flex items-center'>
              Name
              <input className='bg-gray-100' name='imgName' onChange={ (e) => setImgName(e.target.value) } value={ imgName } />
            </label>
            <label className='flex items-center'>
              Description
              <textarea className='bg-gray-100' name='description' onChange={ (e) => setDesc(e.target.value) } value={ desc } />
            </label>
            <button type='submit' disabled={ isGenerateBtnDisabled }>Generate Image</button>
            <button type='button' disabled={ isMintBtnDisabled } className='bg-gray-100' onClick={ mintNFT }>Mint NFT</button>

          </form>
          { image ? <img src={ image } alt='fdfd' height={ 200 } width={ 200 } /> : <p>empty</p> }
          <ToastContainer />
        </div>

      </main>
    </>
  )
}
